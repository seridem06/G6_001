*Muestra una alerta con el mensaje "¡Bienvenido a nuestro sitio web!".*/
//alert('¡Bienvenido a nuestro sitio web!');
/*Declara una variable llamada nombre y asígnale el valor "Lua".*/

/*mensaje de error */
/*alert('');
 let mensajeDeError = '!Error¡ completa todos los campos';
 alert(mensajeDeError);
 let nombre = prompt('Digite su nombre');
 let edad = prompt('Digite su edad');
    if (edad >= 18) {
    alert('¡Puede obtener su licencia de conducir!');
}/*




let edad = prompt("Ingrese su edad:");

if (edad >= 18) {
  console.log("Eres mayor de edad.");
} else {
  console.log("Eres menor de edad.");
}

javascript
alert('Bienvenido al juego del número secreto');
let intento = prompt('Elige un número entre 1 y 10');

let numeroSecreto = 4;

console.log(intento  == numeroSecreto);
if (intento  == numeroSecreto) {
    alert('Acertaste');
} else {
    alert('El número secreto era ' + numeroSecreto);
}
*/
let porcentajeDescuento = 0;
let cantidadMillas = prompt("Ingrese la cantidad de millas");
if (cantidadMillas > 30000) {
    porcentajeDescuento = porcentajeDescuento + 20;
} else {
    if (cantidadMillas > 5000) {
        porcentajeDescuento = porcentajeDescuento + 10;
    }
}30

alert('Bienvenido al juego del número secreto');

// Agrega un console.log para verificar el valor de "intento" después de la entrada del usuario
let intento = prompt('Elige un número entre 1 y 10');
console.log('Valor de intento:', intento);

let numeroSecreto = 4;

// Agrega un console.log para verificar la comparación entre "intento" y "numeroSecreto"
console.log('Resultado de la comparación:', intento == numeroSecreto);

if (intento == numeroSecreto) {
    alert('Adivinaste');
} else {
    // Agrega un console.log para verificar el valor de "numeroSecreto" cuando el jugador se equivoca
    console.log('Valor del número secreto:', numeroSecreto);
    alert('El número secreto era ' + numeroSecreto);
}

==========================================================================================================
El console.log es una función muy importante en lenguajes de programación, especialmente cuando se trabaja con JavaScript. Su función principal es imprimir mensajes en la consola del entorno de desarrollo, lo que permite probar información relevante durante la ejecución de un programa.

Ahora, incluya comandos console.log en diferentes partes del código para verificar el flujo del programa, los valores de las variables y otra información relevante durante la fase de desarrollo.
==========================================================================================================


alert('Bienvenido al juego del número secreto');

// Agrega un console.log para verificar el valor de "intento" después de la entrada del usuario
let intento = prompt('Elige un número entre 1 y 10');
console.log('Valor de intento:', intento);

let numeroSecreto = 4;

// Agrega un console.log para verificar la comparación entre "intento" y "numeroSecreto"
console.log('Resultado de la comparación:', intento == numeroSecreto);

if (intento == numeroSecreto) {
    alert('Adivinaste');
} else {
    // Agrega un console.log para verificar el valor de "numeroSecreto" cuando el jugador se equivoca
    console.log('Valor del número secreto:', numeroSecreto);
    alert('El número secreto era ' + numeroSecreto);
}
==========================================================================================================
desafio 2
==========================================================================================================

# Resolución de los desafíos del curso de lógica de programación <h1>

Practicar la lógica de programación, incluyendo conceptos como variables, condiciones (if-else), bucles (while) e interacciones con el usuario (alert, prompt), es esencial para tu carrera en el desarrollo de software. Estos fundamentos son la base para abordar problemas de manera estructurada, tomar decisiones sin código, crear bucles controlados e interactuar de manera efectiva con los usuarios.

Comprender estos conceptos no solo facilita el aprendizaje de nuevos lenguajes y tecnologías, sino que también te capacita para crear soluciones innovadoras, depurar de manera eficiente y mantener la calidad a lo largo del ciclo de vida del software. Por lo tanto, invertir tiempo en estos principios desde temprano es fundamental para construir una base sólida y exitosa en el campo de la programación.

## Desafíos - Respuestas <h2>

1. Pregunta al usuario qué día de la semana es. Si la respuesta es "Sábado" o "Domingo", muestra "¡Buen fin de semana!". En caso contrario, muestra "¡Buena semana!".
```
  let diaDeLaSemana = prompt('¿Qué día de la semana es?');
if (diaDeLaSemana === 'Sábado' || diaDeLaSemana === 'Domingo') {
    alert('¡Buen fin de semana!');
} else {
    alert('¡Buena semana!');
}
```
2. Verifica si un número ingresado por el usuario es positivo o negativo. Muestra una alerta informativa.
```
  let numero = prompt('Escribe un número positivo o negativo');
if (numero > 0) {
    alert('Número positivo');
} else if (numero < 0) {
    alert('Número negativo');
} else {
    alert('El número es cero');
}
```
3. Crea un sistema de puntuación para un juego. Si la puntuación es mayor o igual a 100, muestra "¡Enhorabuena, has ganado!". En caso contrario, muestra "Inténtalo de nuevo para ganar."
```
  let puntuacion = 105;
if (puntuacion >= 100) {
    console.log('¡Enhorabuena, has ganado!');
} else {
    console.log('Inténtalo de nuevo para ganar.');
}
```
4. Crea un mensaje que informe al usuario sobre el saldo de la cuenta, utilizando un template string para incluir el valor del saldo.
```
  let saldoCuenta = 500; // Ejemplo de saldo
alert(`Tu saldo es de $${saldoCuenta}.`);
```
5. Pide al usuario que ingrese su nombre usando prompt. Luego, muestra una alerta de bienvenida utilizando ese nombre.
```
  let nombre = prompt('Por favor, ingresa tu nombre');
alert(`¡Bienvenido, ${nombre}!`);
```

==========================================================================================================
desafio 2
==========================================================================================================


Resolución de los desafíos del curso de lógica de programación
Practicar la lógica de programación, que incluye conceptos como variables, condicionales (if-else), bucles (while) e interacciones con el usuario (alert, prompt), es esencial para tu carrera en el desarrollo de software. Estos fundamentos proporcionan la base para resolver problemas de manera estructurada, tomar decisiones en el código, crear iteraciones controladas e interactuar eficazmente con los usuarios.

Comprender estos conceptos no solo facilita el aprendizaje de nuevos lenguajes y tecnologías, sino que también te capacita para crear soluciones innovadoras, depurar de manera eficiente y mantener la calidad a lo largo del ciclo de vida del software. Por lo tanto, invertir tiempo en estos principios desde el principio es fundamental para construir una base sólida y exitosa en el campo de la programación.

Desafíos - Respuestas
Crea un contador que comience en 1 y vaya hasta 10 usando un bucle 'while'. Muestra cada número.

let contador = 1;
while (contador <= 10) {
console.log(contador);
contador++;
}

Crea un contador que comience en 10 y vaya hasta 0 usando un bucle 'while'. Muestra cada número.

let contador = 10;
while (contador >= 0) {
console.log(contador);
contador--;
}

Crea un programa de cuenta regresiva. Pide un número y cuenta desde 0 hasta ese número utilizando un bucle 'while' en la consola del navegador.

let numeroMaximo = prompt("Ingresa un número para la cuenta regresiva:");

while (numeroMaximo >= 0) {
console.log(numeroMaximo);
numeroMaximo--;
}

Crea un programa de cuenta progresiva. Pide un número y cuenta desde 0 hasta ese número utilizando un bucle 'while' en la consola del navegador.

let numeroMaximo = prompt("Ingresa un número para la cuenta progresiva:");;
let contador = 0;

while (contador <= numeroMaximo) {
console.log(contador);
contador++
}"

==========================================================================================================
contador 1
==========================================================================================================
Saber cómo trabajar con bucles de repetición, como el 'while', es esencial en la programación. Los bucles permiten automatizar tareas repetitivas y manejar grandes cantidades de datos de manera eficiente.

Sin embargo, es importante utilizarlos con precaución para evitar bucles infinitos (cuando la condición nunca se vuelve falsa, lo que puede bloquear el programa).

Siempre se recomienda tener una lógica que eventualmente haga que la condición se vuelva falsa para que el bucle termine correctamente.

A continuación, tenemos un ejemplo de código:
===========================================================================================================
let contador = 1;

while (contador < 4) {
  console.log('Ejecutando la iteración ' + contador);
  contador = contador + 1;
}
============================================================================================================
============================================================================================================
Al ejecutar código, podemos afirmar que:

Alternativa correta
La instrucción 'while (contador < 4){ }' inicia el bucle 'while'. Este continuará repitiendo el bloque de código dentro de las llaves { } mientras la condición 'contador < 4' sea verdadera.


¡Exactamente! Esa condición significa que el bucle continuará mientras el valor de la variable 'contador' sea menor que 4.

Alternativa correta
El resultado final será la impresión de los mensajes "Ejecutando la iteración 1", "Ejecutando la iteración 2" y "Ejecutando la iteración 3" en la consola.


¡Exacto! El bucle se ejecutó tres veces, y el valor final de la variable 'contador' es 4. En la cuarta iteración, el valor de 'contador' es 4. En ese momento, la condición 'contador < 4' se vuelve falsa, ya que 4 no es menor que 4. El bucle deja de ejecutar el código dentro de las llaves y termina.
============================================================================================================
==========================================================================================================
contador 1
==========================================================================================================
Willian está comenzando en el mundo de la programación y recientemente descubrió que existe una manera de ejecutar un bloque de comandos repetidamente mientras una condición preestablecida no se cumpla.

Animado por las posibilidades, decidió entrenar el uso de la estructura 'while()' en un proyecto personal de cálculo de medias aritméticas. Sin embargo, se encontró con un bucle infinito y no pudo descubrir por qué.

Sabiendo que tú también estás estudiando lógica de programación, William te pidió ayuda para localizar dónde está el error en su código:
===========================================================================================================
let qtdNumeros = prompt('Digite la cantidad de números para el cálculo del promedio:');
let soma = 0;
let contador = qtdNumeros;

while(contador > 0){
    let numero = parseInt(prompt('Digite el numero:'));
    soma += numero;
}

let promedio = soma / qtdNumeros;

console.log(promedio);
===========================================================================================================
¿Qué cambio podrías sugerirle a Willian para que el código obtenga el resultado esperado? Elija la opción correcta:
===========================================================================================================
Cuando utilizamos bucles con contadores, debemos asegurarnos de que en algún momento alcancen la condición de parada del bucle. En el código anterior, el contador no tiene su valor alterado, y para resolver el bucle infinito, simplemente debes decrementarlo en cada iteración, agregando la línea 'contador--' dentro del bucle.


Al decrementar el valor de la variable contador en cada iteración, eventualmente será menor o igual a 0, lo que detendrá la ejecución del bucle.
============================================================================================================
PARA SABER MAS: operadores logicos
============================================================================================================
uando escribimos programas en JavaScript, a menudo nos encontramos con la necesidad de tomar decisiones basadas en condiciones. Es aquí donde los operadores lógicos entran en escena y nos ayudan a crear una lógica sólida y eficaz.

A continuación, vamos a explorar los operadores lógicos de una manera simple y fácil de entender. Tendremos ejemplos claros para ilustrar su funcionamiento.

AND (&&)

El operador AND, representado por el símbolo "&&", se utiliza para combinar dos condiciones y evaluar si ambas son verdaderas. Si ambas condiciones son verdaderas, el resultado será... verdadero. De lo contrario, lógicamente será falso. Por ejemplo:
============================================================================================================
let idad = 25;
let tieneLicencia = true;

// si la edad es mayor de 18 y tiene una licencia...
if (idad > 18 && tieneLicencia) {
  console.log("Puede conducir!");
} else {
  console.log("No puede conducir!");
}
============================================================================================================
OR( | | )

El operador OR, representado por los símbolos "||", se utiliza para verificar si al menos una de las condiciones es verdadera. Si una de las condiciones es verdadera, el resultado será verdadero. Si ambas son falsas, el resultado será falso. Aquí tienes un ejemplo: let tieneManzana = false; let tieneBanana = true;
============================================================================================================
// si tiene manzana o tiene banama…
if (tieneManzana|| tieneBanana) {
  console.log("Tienes frutas!");
} else {
  console.log("No tienes frutas.");
}
============================================================================================================
OTROS TIPOS DE OPERADORES logicos
============================================================================================================
imagen_01
imagen_02
============================================================================================================
============================================================================================================
SOLO 5 INTENTOS
============================================================================================================
Eres la persona encargada del sistema informático de Serenatto - Café & Bistró. La gerente desea mejorar el sistema de lotería del bistró implementando un juego en el cual los clientes adivinan un número secreto para ganar un descuento especial. Empleando tus conocimientos del curso "Lógica de programación: sumérgete en la programación con JavaScript", decides implementar esta funcionalidad utilizando la instrucción "break".

Pregunta: ¿Cómo implementarás un límite de 5 intentos para que los clientes adivinen el número secreto?
============================================================================================================
Utilizando un bucle while con la instrucción break cuando el cliente adivine el número.
============================================================================================================
let numeroSecreto = Math.floor(Math.random() * 10);
let intentos = 0;
while (intentos < 5) {
  let intento = parseInt(prompt("Ingrese un número del 0 al 9:"));
  intentos++;
  if (intento == numeroSecreto) {
    alert(`¡Eso es! Descubriste el número secreto ${numeroSecreto}`);
    break;
  }
}

============================================================================================================
Usando un bucle for junto con la instrucción break cuando el cliente adivine el número o cuando el número de intentos llegue a 5.
============================================================================================================
let numeroSecreto = Math.floor(Math.random() * 10);
for (let intentos = 0; intentos < 5; intentos++) {
  let intento = parseInt(prompt("Ingrese un número del 0 al 9:"));
  if (intento == numeroSecreto) {
    alert(`¡Eso es! Descubriste el número secreto ${numeroSecreto}`);
    break;
  }
}
============================================================================================================
Refactorizando
============================================================================================================
Aline está dando sus primeros pasos en la programación utilizando JavaScript y recientemente descubrió una funcionalidad que le pareció fascinante: el operador ternario.

Ella encontró muy interesante la posibilidad que el operador ofrece para reducir la cantidad de código escrito en algunas ocasiones y decidió aplicarlo en la práctica, en uno de sus proyectos personales. Sin embargo, al intentar hacer esta refactorización, se olvidó de la sintaxis del operador ternario.

Sabiendo que tú has estudiado sobre el operador recientemente, ella te pidió ayuda y te mostró el código que quiere refactorizar:
============================================================================================================
let palabraPersona = "";

if(cantidadPersonas == 1){
    palabraPersona = "persona";
}else{
    palabraPersona = "personas"
}
============================================================================================================
¿Cómo podrías mostrarle a Aline un ejemplo de cómo transformar este fragmento de código en otro que tenga el mismo comportamiento, pero utilice el operador ternario?

let palabraPersona = cantidadPersonas == 1 ? "persona" : "personas";
============================================================================================================
============================================================================================================
Desafio: Hora de Practicar
============================================================================================================
Y vamos a poner en práctica nuestro conocimiento con otra lista de actividades (no obligatorias) para que practiques y refuerces aún más tu aprendizaje.

Desafíos finales:

Crea un programa que utilice console.log para mostrar un mensaje de bienvenida.

Crea una variable llamada "nombre" y asígnale tu nombre. Luego, utiliza console.log para mostrar el mensaje "¡Hola, [tu nombre]!" en la consola del navegador.

Crea una variable llamada "nombre" y asígnale tu nombre. Luego, utiliza alert para mostrar el mensaje "¡Hola, [tu nombre]!".

Utiliza prompt y haz la siguiente pregunta: ¿Cuál es el lenguaje de programación que más te gusta?. Luego, almacena la respuesta en una variable y muestra la respuesta en la consola del navegador.

Crea una variable llamada "valor1" y otra llamada "valor2", asignándoles valores numéricos de tu elección. Luego, realiza la suma de estos dos valores y almacena el resultado en una tercera variable llamada "resultado". Utiliza console.log para mostrar el mensaje "La suma de [valor1] y [valor2] es igual a [resultado]." en la consola.

Crea una variable llamada "valor1" y otra llamada "valor2", asignándoles valores numéricos de tu elección. Luego, realiza la resta de estos dos valores y almacena el resultado en una tercera variable llamada "resultado". Utiliza console.log para mostrar el mensaje "La diferencia entre [valor1] y [valor2] es igual a [resultado]." en la consola.

Pide al usuario que ingrese su edad con prompt. Con base en la edad ingresada, utiliza un if para verificar si la persona es mayor o menor de edad y muestra un mensaje apropiado en la consola.

Crea una variable "numero" y solicita un valor con prompt. Luego, verifica si es positivo, negativo o cero utilizando un if-else y muestra el mensaje correspondiente.

Utiliza un bucle while para mostrar los números del 1 al 10 en la consola.

Crea una variable "nota" y asígnale un valor numérico. Utiliza un if-else para determinar si la nota es mayor o igual a 7 y muestra "Aprobado" o "Reprobado" en la consola.

Utiliza Math.random para generar cualquier número aleatorio y muestra ese número en la consola.

Utiliza Math.random para generar un número entero entre 1 y 10 y muestra ese número en la consola.

Utiliza Math.random para generar un número entero entre 1 y 1000 y muestra ese número en la consola.

Si necesitas ayuda, las soluciones a las actividades estarán disponibles en la sección "Opinión de la persona instructora".

========================================================================================================================
Resolução dos desafios do curso de lógica de programação
Praticar a lógica de programação, incluindo conceitos como variáveis, condicionais (if-else), loops (while) e interações com o usuário (alert, prompt), é essencial para sua carreira de desenvolvimento de software. Esses fundamentos fornecem a base para resolver problemas de forma estruturada, tomar decisões no código, criar iterações controladas e interagir eficazmente com os usuários.

Compreender esses conceitos não apenas facilita o aprendizado de novas linguagens e tecnologias, mas também capacita você a criar soluções inovadoras, depurar eficientemente e manter a qualidade ao longo do ciclo de vida do software. Portanto, investir tempo nesses princípios desde cedo é fundamental para construir uma base sólida e bem-sucedida no campo da programação.

Aquecendo na programação - Respostas
Crie um programa que utilize o console.log para exibir uma mensagem de boas-vindas.
console.log('Boas vindas');
Crie uma variável chamada "nome" e atribua a ela o seu nome. Em seguida, utilize o console.log para exibir a mensagem "Olá, [seu nome]!" no console do navegador.
let nome = 'Gui Lima';
console.log(`Olá, ${nome}!`);
Crie uma variável chamada "nome" e atribua a ela o seu nome. Em seguida, utilize o alert para exibir a mensagem "Olá, [seu nome]!".
let nome = 'Gui Lima';
alert(`Olá, ${nome}!`);
Utilize o prompt e faça a seguinte pergunta: Qual  a linguagem de programação que você mais gosta?. Em seguida, armazene a resposta em uma variável e mostre no console do navegador.
let linguagemPreferida = prompt('Qual  a linguagem de programação que você mais gosta?');
console.log(linguagemPreferida);
Crie uma variável chamada "valor1" e outra chamada "valor2", atribuindo a elas valores numéricos de sua escolha. Em seguida, realize a soma desses dois valores e armazene o resultado em uma terceira variável chamada "resultado". Utilize o console.log para mostrar a mensagem "A soma de [valor1] e [valor2] é igual a [resultado]." no console.
let valor1 = 42;
let valor2 = 8;
let resultado = valor1 + valor2;

console.log(`A soma de ${valor1} e ${valor2} é igual a ${resultado}.`)
Crie uma variável chamada "valor1" e outra chamada "valor2", atribuindo a elas valores numéricos de sua escolha. Em seguida, realize a subtração desses dois valores e armazene o resultado em uma terceira variável chamada "resultado". Utilize o console.log para mostrar a mensagem "A diferença entre [valor1] e [valor2] é igual a [resultado]." no console.
let valor1 = 10;
let valor2 = 8;
let resultado = valor1 - valor2;

console.log(`A diferença entre ${valor1} e ${valor2} é igual a ${resultado}.`);
Peça ao usuário para inserir sua idade com prompt. Com base na idade inserida, utilize um if para verificar se a pessoa é maior ou menor de idade, exibindo uma mensagem apropriada no console.
let idade = prompt('Digite a sua idade:');
if (idade > 17) {
    console.log('Você é maior de idade.');
} else {
    console.log('Você é menor de idade.');
}
Crie uma variável "numero" e peça um valor com prompt verifique se é positivo, negativo ou zero. Use if-else para imprimir a respectiva mensagem.
var numero = parseFloat(prompt("Digite um número:"));


if (numero > 0) {
    console.log("O número é positivo.");
} else if (numero < 0) {
    console.log("O número é negativo.");
} else {
    console.log("O número é zero.");
}
Use um loop while para imprimir os números de 1 a 10 no console.
let numero = 1;
while (numero <= 10) {
    console.log(numero);
    numero++;
}
Crie uma variável "nota" e atribua um valor numérico a ela. Use if-else para determinar se a nota é maior ou igual a 7 e exiba "Aprovado" ou "Reprovado" no console.
let nota = 8; // Substitua pelo valor da nota que deseja testar

if (nota >= 7) {
    console.log("Aprovado");
} else {
    console.log("Reprovado");
}
Use o Math.ramdon para gerar qualquer número aleatório e exiba esse número no console.
let numeroAleatorio = Math.random();
console.log(numeroAleatorio);
Use o Math.ramdon para gerar um número inteiro entre 1 e 10 e exiba esse número no console.
let numeroInteiroAleatorio = parseInt(Math.random() * 10) + 1;
console.log(numeroInteiroAleatorio);
Use o Math.ramdon para gerar um número inteiro entre 1 e 1000 e exiba esse número no console.
let numeroInteiroAleatorio = parseInt(Math.random() * 1000) + 1;
console.log(numeroInteiroAleatorio);
========================================================================================================================
Para saber más: ¿Necesito memorizar cada línea de código o comando?
========================================================================================================================
Comprender cada línea de código o comando en detalle es ciertamente una aspiración loable, pero no es necesario memorizar. El desarrollo de software moderno es una tarea compleja, y los lenguajes de programación ofrecen una amplia gama de recursos y bibliotecas.

En lugar de memorizar cada línea, es más valioso entender los conceptos fundamentales detrás de las estructuras de programación y saber cómo utilizar la documentación de manera efectiva.

La documentación de un lenguaje de programación es una herramienta esencial para todos los desarrolladores. No solo proporciona una referencia rápida para la sintaxis y los comandos, sino que también explica los conceptos subyacentes, ofrece ejemplos prácticos y ayuda a comprender los diferentes recursos disponibles.

A través de la documentación, puedes aprender a usar bibliotecas, explorar casos de uso avanzados y comprender las mejores prácticas recomendadas por la comunidad. Esto ahorra tiempo, evita errores y te permite mantenerte actualizado con las últimas actualizaciones del lenguaje.

En lugar de preocuparte por memorizar cada detalle, concéntrate en desarrollar habilidades de resolución de problemas, comprender los principios de diseño de software y aprender a investigar de manera eficiente en la documentación. La capacidad de leer e interpretar la documentación es una habilidad valiosa, ya que te permite aprender nuevos lenguajes y tecnologías de manera efectiva, adaptándote rápidamente a los cambios en el panorama de desarrollo. Por lo tanto, en tu viaje como desarrollador, recuerda que la habilidad de comprender y usar la documentación es tan importante como saber escribir código.

En esta lección, vimos cómo usar la documentación para generar un número aleatorio a través de la documentación de Mozilla. Sin embargo, también existe W3Schools (W3S), que es un recurso en línea ampliamente conocido y utilizado para aprender diversas tecnologías de desarrollo web, incluido JavaScript (JS).El sitio web ofrece tutoriales interactivos, ejemplos de código, referencias de sintaxis y conceptos fundamentales relacionados con JavaScript y otros lenguajes web.

Al explorar W3Schools, puedes adquirir una comprensión sólida de los principios de JS, desde lo básico hasta temas más avanzados, como la manipulación del DOM, interacciones con el usuario y solicitudes asíncronas. Es una herramienta valiosa para mejorar tus habilidades en JavaScript, ofreciendo un entorno práctico para experimentar con código, comprender conceptos clave y aplicar el conocimiento adquirido en tus propios proyectos de desarrollo web.